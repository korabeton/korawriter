{
    "create a new variable": "    new_variable = None\n    ",
    "create a new function": "    def new_function():\n        pass\n    ",
    "print a message": "    print(\"Hello, World!\")\n    ",
    "sort a list of dictionaries by a specific key": "    list_of_dicts = [{'name': 'John', 'age': 25}, {'name': 'Jane', 'age': 32}, {'name': 'Bob', 'age': 19}]\n    sorted_list = sorted(list_of_dicts, key=lambda k: k['name'])\n    print(sorted_list)\n    ",
    "create a dictionary from two lists": "    keys = ['name', 'age', 'country']\n    values = ['John', 25, 'USA']\n    new_dict = dict(zip(keys, values))\n    print(new_dict)\n    ",
    "flatten a nested list": "    nested_list = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\n    flat_list = [item for sublist in nested_list for item in sublist]\n    print(flat_list)\n    ",
    "reverse a string": "    original_string = 'Hello, World!'\n    reversed_string = original_string[::-1]\n    print(reversed_string)\n    ",
    "calculate the factorial of a number": "    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    \n    result = factorial(5)\n    print(result)\n    ",
    "calculate the fibonacci sequence up to a certain number": "    def fibonacci(n):\n        sequence = [0, 1]\n        while sequence[-1] < n:\n            sequence.append(sequence[-1] + sequence[-2])\n        return sequence[:-1]\n    \n    result = fibonacci(50)\n    print(result)\n    ",
    "count the frequency of items in a list": "    my_list = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n    freq_dict = {item: my_list.count(item) for item in my_list}\n    print(freq_dict)\n    ",
    "generate a random password": "    import random\n    import string\n    \n    def generate_password(length):\n        characters = string.ascii_letters + string.digits + string.punctuation\n        password = ''.join(random.choice(characters) for i in range(length))\n        return password\n    \n    result = generate_password(10)\n    print(result)\n    ",
    "check if a string is a palindrome": "    my_string = 'racecar'\n    reversed_string = my_string[::-1]\n    if my_string == reversed_string:\n        print('Palindrome')\n    else:\n        print('Not a palindrome')\n    ",
    "find the largest number in a list": "    my_list = [5, 10, 3, 8, 1]\n    largest_number = max(my_list)\n    print(largest_number)\n    ",
    "find the smallest number in a list": "    my_list = [5, 10, 3, 8, 1]\n    smallest_number = min(my_list)\n    print(smallest_number)\n    ",
    "calculate the sum of all numbers in a list": "    my_list = [1, 2, 3, 4, 5]\n    sum_of_numbers = sum(my_list)\n    print(sum_of_numbers)\n    ",
    "calculate the average of numbers in a list": "    my_list = [1, 2, 3, 4, 5]\n    average = sum(my_list) / len(my_list)\n    print(average)\n    ",
    "add two numbers": "    sum = a + b\n    ",
    "create a loop": "    for x in range(10):\n        # do something\n    ",
    "create a list": "    my_list = [1, 2, 3]\n    ",
    "create a class": "    class MyClass:\n        def __init__(self):\n            pass\n    ",
    "initialize a dictionary": "    dict = {}\n    ",
    "define a function with parameters": "    def my_function(param1, param2):\n        # do something\n    ",
    "define an if-else statement": "    if condition:\n        # do something\n    else:\n        # do something else\n    ",
    "import a module": "    import my_module\n    ",
    "raise an exception": "    raise Exception('My error message')\n    ",
    "open a file": "    with open('my_file.txt', 'r') as f:\n        data = f.read()\n    ",
    "append to a list": "    my_list.append(4)\n    ",
    "create a tuple": "    my_tuple = (1, 2, 3)\n    ",
    "create a for loop": "    for element in my_list:\n        # do something\n    ",
    "create an if statement": "    if condition:\n        # do something\n    ",
    "create a while loop": "    while condition:\n        # do something\n    ",
    "sort a list": "    sorted_list = sorted(my_list)\n    ",
    "convert a string to an int": "    my_int = int(my_string)\n    ",
    "check if a list is empty": "    if not my_list:\n        # list is empty\n    ",
    "access an element in a list": "    my_element = my_list[index]\n    ",
    "create a dictionary": "    my_dict = {'key': 'value'}\n    ",
    "read from a file": "    with open('my_file.txt', 'r') as f:\n        data = f.read()\n    ",
    "write to a file": "    with open('my_file.txt', 'w') as f:\n        f.write('My data')\n    ",
    "create a set": "    my_set = set([1, 2, 3])\n    ",
    "return a value from a function": "    return my_value\n    ",
    "call a function": "    my_function()\n    ",
    "check if a value is in a list": "    if my_value in my_list:\n        # do something\n    ",
    "pop an element from a list": "    my_element = my_list.pop()\n    ",
    "initialize a variable": "    my_variable = None\n    ",
    "split a string": "    parts = my_string.split(',')\n    ",
    "check the length of a list": "    if len(my_list) == 0:\n        # list is empty\n    ",
    "create an array": "    import array\n    my_array = array.array('i', [1, 2, 3])\n    ",
    "remove an element from a list": "    my_list.remove(my_element)\n    ",
    "check the type of a variable": "    if type(my_variable) == str:\n        # do something\n    ",
    "check if two variables are equal": "    if var1 == var2:\n        # do something\n    ",
    "check if a value is in a dictionary": "    if my_value in my_dict.values():\n        # do something\n    ",
    "convert a list to a tuple": "    my_tuple = tuple(my_list)\n    ",
    "check if a key is in a dictionary": "    if my_key in my_dict:\n        # do something\n    ",
    "iterate over a dictionary": "    for key, value in my_dict.items():\n        # do something\n    ",
    "create a try-except block": "    try:\n        # do something\n    except Exception as e:\n        # do something else\n    ",
    "create a list comprehension": "    my_list = [x * 2 for x in range(10)]\n    ",
    "create a generator expression": "    my_generator = (x * 2 for x in range(10))\n    ",
    "create a namedtuple": "    from collections import namedtuple\n    MyTuple = namedtuple('MyTuple', ['a', 'b', 'c'])\n    ",
    "add an element to a set": "    my_set.add(4)\n    ",
    "initialize a list of lists": "    my_list = [[] for _ in range(10)]\n    ",
    "check the type of an object": "    if isinstance(my_object, str):\n        # do something\n    ",
    "format a string": "    formatted_string = '{}, {}!'.format('Hello', 'World')\n    ",
    "check the length of a string": "    if len(my_string) == 0:\n        # string is empty\n    ",
    "check if a value is in a set": "    if my_value in my_set:\n        # do something\n    ",
    "create a context manager": "    with my_context_manager() as cm:\n        # do something\n    ",
    "create a list of dictionaries": "    my_list = [{'key': 'value'} for _ in range(10)]\n    ",
    "create a defaultdict": "    from collections import defaultdict\n    my_dict = defaultdict(int)\n    ",
    "convert a tuple to a list": "    my_list = list(my_tuple)\n    ",
    "convert a dict to a list": "    my_list = list(my_dict.items())\n    ",
    "check if a variable is None": "    if my_variable is None:\n        # do something\n    ",
    "execute a shell command": "    import subprocess\n    output = subprocess.run(['ls', '-l'])\n    ",
    "get the size of a file": "    import os\n    size = os.stat('my_file.txt').st_size\n    ",
    "get the current working directory": "    import os\n    cwd = os.getcwd()\n    ",
    "create a Counter": "    from collections import Counter\n    my_counter = Counter()\n    ",
    "convert a list to a set": "    my_set = set(my_list)\n    ",
    "check if a string is empty": "    if not my_string:\n        # string is empty\n    ",
    "create a Counter from a list": "    from collections import Counter\n    my_counter = Counter(my_list)\n    ",
    "create a lambda expression": "    my_lambda = lambda x: x * 2\n    ",
    "copy a file": "    import shutil\n    shutil.copy('source.txt', 'dest.txt')\n    ",
    "convert an int to a string": "    my_string = str(my_int)\n    ",
    "check if a file exists": "    import os\n    if os.path.exists('my_file.txt'):\n        # do something\n    ",
    "check if a directory exists": "    import os\n    if os.path.isdir('my_dir'):\n        # do something\n    ",
    "iterate over a file": "    with open('my_file.txt', 'r') as f:\n        for line in f:\n            # do something\n    ",
    "check if a string contains a substring": "    if my_substring in my_string:\n        # do something\n    ",
    "create a deque": "    from collections import deque\n    my_deque = deque()\n    ",
    "create a namedtuple from a dictionary": "    from collections import namedtuple\n    MyTuple = namedtuple('MyTuple', my_dict.keys())\n    ",
    "check if a list contains a value": "    if my_value in my_list:\n        # do something\n    ",
    "remove a file": "    import os\n    os.remove('my_file.txt')\n    ",
    "create a tuple from two lists": "    my_tuple = tuple(zip(list1, list2))\n    ",
    "create a set from a list": "    my_set = set(my_list)\n    ",
    "check if a value is in a tuple": "    if my_value in my_tuple:\n        # do something\n    ",
    "create an OrderedDict": "    from collections import OrderedDict\n    my_dict = OrderedDict()\n    ",
    "create a ChainMap": "    from collections import ChainMap\n    my_map = ChainMap()\n    ",
    "create a defaultdict with default factory": "    from collections import defaultdict\n    my_dict = defaultdict(str)\n    ",
    "check if a list contains a substring": "    if any(my_substring in s for s in my_list):\n        # do something\n    ",
    "create a namedtuple from keyword arguments": "    from collections import namedtuple\n    MyTuple = namedtuple('MyTuple', kwargs.keys())\n    ",
    "create a namedtuple from a list of tuples": "    from collections import namedtuple\n    MyTuple = namedtuple('MyTuple', [t[0] for t in my_list])\n    ",
    "check if an element is in a set": "    if my_element in my_set:\n        # do something\n    ",
    "remove an element from a set": "    my_set.remove(my_element)\n    ",
    "create a dictionary comprehension": "    my_dict = {x: x*2 for x in range(10)}\n    ",
    "create a Counter from a dictionary": "    from collections import Counter\n    my_counter = Counter(my_dict)\n    ",
    "pop an element from a dictionary": "    my_element = my_dict.pop('key')\n    ",
    "create a set comprehension": "    my_set = {x*2 for x in range(10)}\n    ",
    "check if a value is in a Counter": "    if my_value in my_counter.values():\n        # do something\n    ",
    "convert a dictionary to a list": "    my_list = list(my_dict.items())\n    ",
    "check if a key is in a Counter": "    if my_key in my_counter:\n        # do something\n    ",
    "create a defaultdict with multiple default factories": "    from collections import defaultdict\n    my_dict = defaultdict(lambda: defaultdict(int))\n    ",
    "check if an element is in a Counter": "    if my_element in my_counter:\n        # do something\n    ",
    "create a Counter from a string": "    from collections import Counter\n    my_counter = Counter(my_string)\n    ",
    "convert a Counter to a dictionary": "    my_dict = dict(my_counter)\n    ",
    "check if a value is in a namedtuple": "    if my_value in my_tuple._fields:\n        # do something\n    ",
    "check if a key is in a namedtuple": "    if my_key in my_tuple._asdict():\n        # do something\n    ",
    "create a defaultdict with default value": "    from collections import defaultdict\n    my_dict = defaultdict(lambda: 'default value')\n    ",
    "check if a key is in a tuple": "    if my_key in my_tuple._fields:\n        # do something\n    ",
    "create a Counter from a tuple": "    from collections import Counter\n    my_counter = Counter(my_tuple)\n    ",
    "create a list of tuples": "    my_list = [(1, 2), (3, 4), (5, 6)]\n    ",
    "check if a substring is in a list": "    if any(my_substring in s for s in my_list):\n        # do something\n    ",
    "check if a key is in a ChainMap": "    if my_key in my_map.maps[0]:\n        # do something\n    ",
    "check if a value is in a ChainMap": "    if my_value in my_map.values():\n        # do something\n    ",
    "Define the neural network architecture": "    class Net(nn.Module):\n     def init(self):\n     super(Net, self).init()\n     self.fc1 = nn.Linear(784, 256)\n     self.fc2 = nn.Linear(256, 10)\n    \n     def forward(self, x):\n     x = x.view(-1, 784)\n     x = torch.relu(self.fc1(x))\n     x = self.fc2(x)\n     return x",
    "Load the MNIST dataset": "    trainset = torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=torchvision.transforms.ToTensor())\n    trainloader = torch.utils.data.DataLoader(trainset, batch_size=32, shuffle=True, num_workers=2)",
    "Create an instance of the neural network": "    net = Net()",
    "Define the loss function and optimizer": "    criterion = nn.CrossEntropyLoss()\n    optimizer = torch.optim.SGD(net.parameters(), lr=0.01)",
    "Train the neural network": "    for epoch in range(10):\n     running_loss = 0.0\n     for i, data in enumerate(trainloader, 0):\n     inputs, labels = data\n     optimizer.zero_grad()\n     outputs = net(inputs)\n     loss = criterion(outputs, labels)\n     loss.backward()\n     optimizer.step()\n     running_loss += loss.item()\n     print('Epoch %d loss: %.3f' % (epoch+1, running_loss/len(trainloader)))",
    "Calculate the dot product of two vectors": "    def dot_product(vector1, vector2):\n     if len(vector1) != len(vector2):\n     raise ValueError('Vectors must have the same length')\n     return sum(v1 * v2 for v1, v2 in zip(vector1, vector2))",
    "Create a calculator application": "    def calculator():\n     while True:\n     try:\n     num1 = float(input('Enter the first number: '))\n     num2 = float(input('Enter the second number: '))\n     except ValueError:\n     print('Invalid input. Please enter a number.')\n     continue\n     op = input('Enter an operator (+, -, , /): ')\n     if op == '+':\n     print(num1 + num2)\n     elif op == '-':\n     print(num1 - num2)\n     elif op == '':\n     print(num1 * num2)\n     elif op == '/':\n     if num2 == 0:\n     print('Cannot divide by zero')\n     else:\n     print(num1 / num2)\n     else:\n     print('Invalid operator. Please enter one of the following: +, -, *, /')\n     again = input('Do you want to perform another calculation? (y/n)')\n     if again.lower() == 'n':\n     break",
    "Build a simple AI chatbot": "    import random\n    \n    responses = {\n     'hi': ['Hello!', 'Hi there!', 'Hi, how can I help you today?'],\n     'how are you': ['I am doing well, thank you for asking.', 'I am fine, thanks for asking.'],\n     'what is your name': ['My name is ChatBot.', 'I go by the name ChatBot.'],\n     'bye': ['Goodbye!', 'See you later!', 'Have a nice day!']\n    }\n    \n    def chatbot():\n     print('Hello, I am ChatBot. How can I assist you today?')\n     while True:\n     message = input().lower()\n     if message in responses:\n     print(random.choice(responses[message]))\n     elif 'joke' in message:\n     print('Why don't scientists trust atoms? Because they make up everything!')\n     elif 'meaning of life' in message:\n     print('The answer to the ultimate question of life, the universe, and everything is 42.')\n     elif 'exit' in message or 'bye' in message:\n     print('Goodbye!')\n     break\n     else:\n     print('I'm sorry, I don't understand. Can you please try again or ask me something else?')",
    "code a simple AI chatbot": "    import random\n    \n    responses = {\n     'hi': ['Hello!', 'Hi there!', 'Hi, how can I help you today?'],\n     'how are you': ['I am doing well, thank you for asking.', 'I am fine, thanks for asking.'],\n     'what is your name': ['My name is ChatBot.', 'I go by the name ChatBot.'],\n     'bye': ['Goodbye!', 'See you later!', 'Have a nice day!']\n    }\n    \n    def chatbot():\n     print('Hello, I am ChatBot. How can I assist you today?')\n     while True:\n     message = input().lower()\n     if message in responses:\n     print(random.choice(responses[message]))\n     elif 'joke' in message:\n     print('Why don't scientists trust atoms? Because they make up everything!')\n     elif 'meaning of life' in message:\n     print('The answer to the ultimate question of life, the universe, and everything is 42.')\n     elif 'exit' in message or 'bye' in message:\n     print('Goodbye!')\n     break\n     else:\n     print('I'm sorry, I don't understand. Can you please try again or ask me something else?')",
    "code a AI chatbot": "    import random\n    \n    responses = {\n     'hi': ['Hello!', 'Hi there!', 'Hi, how can I help you today?'],\n     'how are you': ['I am doing well, thank you for asking.', 'I am fine, thanks for asking.'],\n     'what is your name': ['My name is ChatBot.', 'I go by the name ChatBot.'],\n     'bye': ['Goodbye!', 'See you later!', 'Have a nice day!']\n    }\n    \n    def chatbot():\n     print('Hello, I am ChatBot. How can I assist you today?')\n     while True:\n     message = input().lower()\n     if message in responses:\n     print(random.choice(responses[message]))\n     elif 'joke' in message:\n     print('Why don't scientists trust atoms? Because they make up everything!')\n     elif 'meaning of life' in message:\n     print('The answer to the ultimate question of life, the universe, and everything is 42.')\n     elif 'exit' in message or 'bye' in message:\n     print('Goodbye!')\n     break\n     else:\n     print('I'm sorry, I don't understand. Can you please try again or ask me something else?')",
    "code a chatbot": "    import random\n    \n    responses = {\n     'hi': ['Hello!', 'Hi there!', 'Hi, how can I help you today?'],\n     'how are you': ['I am doing well, thank you for asking.', 'I am fine, thanks for asking.'],\n     'what is your name': ['My name is ChatBot.', 'I go by the name ChatBot.'],\n     'bye': ['Goodbye!', 'See you later!', 'Have a nice day!']\n    }\n    \n    def chatbot():\n     print('Hello, I am ChatBot. How can I assist you today?')\n     while True:\n     message = input().lower()\n     if message in responses:\n     print(random.choice(responses[message]))\n     elif 'joke' in message:\n     print('Why don't scientists trust atoms? Because they make up everything!')\n     elif 'meaning of life' in message:\n     print('The answer to the ultimate question of life, the universe, and everything is 42.')\n     elif 'exit' in message or 'bye' in message:\n     print('Goodbye!')\n     break\n     else:\n     print('I'm sorry, I don't understand. Can you please try again or ask me something else?')",
    "Build a simple AI": "    import random\n    \n    responses = {\n     'hi': ['Hello!', 'Hi there!', 'Hi, how can I help you today?'],\n     'how are you': ['I am doing well, thank you for asking.', 'I am fine, thanks for asking.'],\n     'what is your name': ['My name is ChatBot.', 'I go by the name ChatBot.'],\n     'bye': ['Goodbye!', 'See you later!', 'Have a nice day!']\n    }\n    \n    def chatbot():\n     print('Hello, I am ChatBot. How can I assist you today?')\n     while True:\n     message = input().lower()\n     if message in responses:\n     print(random.choice(responses[message]))\n     elif 'joke' in message:\n     print('Why don't scientists trust atoms? Because they make up everything!')\n     elif 'meaning of life' in message:\n     print('The answer to the ultimate question of life, the universe, and everything is 42.')\n     elif 'exit' in message or 'bye' in message:\n     print('Goodbye!')\n     break\n     else:\n     print('I'm sorry, I don't understand. Can you please try again or ask me something else?')",
    "Implement a simple linear regression model": "    import numpy as np\n    from sklearn.linear_model import LinearRegression\n    \n    x = np.array([1, 2, 3, 4, 5])\n    y = np.array([2, 4, 5, 4, 5])\n    x = x.reshape(-1, 1)\n    \n    model = LinearRegression()\n    model.fit(x, y)\n    \n    # Predict the y values for new x values\n    new_x = np.array([6, 7, 8, 9, 10])\n    new_x = new_x.reshape(-1, 1)\n    new_y = model.predict(new_x)\n    print(new_y)",
    "code a calculator application": "    def calculator():\n     while True:\n     try:\n     num1 = float(input('Enter the first number: '))\n     num2 = float(input('Enter the second number: '))\n     except ValueError:\n     print('Invalid input. Please enter a number.')\n     continue\n     op = input('Enter an operator (+, -, , /): ')\n     if op == '+':\n     print(num1 + num2)\n     elif op == '-':\n     print(num1 - num2)\n     elif op == '':\n     print(num1 * num2)\n     elif op == '/':\n     if num2 == 0:\n     print('Cannot divide by zero')\n     else:\n     print(num1 / num2)\n     else:\n     print('Invalid operator. Please enter one of the following: +, -, *, /')\n     again = input('Do you want to perform another calculation? (y/n)')\n     if again.lower() == 'n':\n     break",
    "Create a calculator": "    def calculator():\n     while True:\n     try:\n     num1 = float(input('Enter the first number: '))\n     num2 = float(input('Enter the second number: '))\n     except ValueError:\n     print('Invalid input. Please enter a number.')\n     continue\n     op = input('Enter an operator (+, -, , /): ')\n     if op == '+':\n     print(num1 + num2)\n     elif op == '-':\n     print(num1 - num2)\n     elif op == '':\n     print(num1 * num2)\n     elif op == '/':\n     if num2 == 0:\n     print('Cannot divide by zero')\n     else:\n     print(num1 / num2)\n     else:\n     print('Invalid operator. Please enter one of the following: +, -, *, /')\n     again = input('Do you want to perform another calculation? (y/n)')\n     if again.lower() == 'n':\n     break",
    "Code a calculator": "    def calculator():\n     while True:\n     try:\n     num1 = float(input('Enter the first number: '))\n     num2 = float(input('Enter the second number: '))\n     except ValueError:\n     print('Invalid input. Please enter a number.')\n     continue\n     op = input('Enter an operator (+, -, , /): ')\n     if op == '+':\n     print(num1 + num2)\n     elif op == '-':\n     print(num1 - num2)\n     elif op == '':\n     print(num1 * num2)\n     elif op == '/':\n     if num2 == 0:\n     print('Cannot divide by zero')\n     else:\n     print(num1 / num2)\n     else:\n     print('Invalid operator. Please enter one of the following: +, -, *, /')\n     again = input('Do you want to perform another calculation? (y/n)')\n     if again.lower() == 'n':\n     break",
    "Create a web scraping tool": "    import requests\n    from bs4 import BeautifulSoup\n    \n    url = 'https://www.example.com'\n    \n    response = requests.get(url)\n    \n    soup = BeautifulSoup(response.content, 'html.parser')\n    \n    links = soup.find_all('a')\n    \n    for link in links:\n     print(link.get('href'))",
    "Implement a binary search algorithm": "    def binary_search(arr, x):\n     low = 0\n     high = len(arr) - 1\n     mid = 0\n     while low <= high:\n     mid = (high + low) // 2\n     if arr[mid] < x:\n     low = mid + 1\n     elif arr[mid] > x:\n     high = mid - 1\n     else:\n     return mid\n     return -1",
    "Create a password generator": "    import random\n    import string\n    \n    def generate_password(length=8):\n     chars = string.ascii_letters + string.digits + string.punctuation\n     return ''.join(random.choice(chars) for _ in range(length))",
    "Code a tic-tac-toe game": "    def display_board(board):\n     print(board[0] + '|' + board[1] + '|' + board[2])\n     print('-|-|-\n    ')\n     print(board[3] + '|' + board[4] + '|' + board[5])\n     print('-|-|-\n    ')\n     print(board[6] + '|' + board[7] + '|' + board[8])\n    \n    board = [' ']*9\n    \n    def check_win(board, player):\n     if board[0] == board[1] == board[2] == player or \\n board[3] == board[4] == board[5] == player or \\n board[6] == board[7] == board[8] == player or \\n board[0] == board[3] == board[6] == player or \\n board[1] == board[4] == board[7] == player or \\n board[2] == board[5] == board[8] == player or \\n board[0] == board[4] == board[8] == player or \\n board[2] == board[4] == board[6] == player:\n     return True\n     else:\n     return False\n    \n    player1 = 'X'\n    player2 = 'O'\n    \n    while True:\n     display_board(board)\n     position = int(input('Choose a position (1-9): ')) - 1\n     if board[position] == ' ':\n     board[position] = player1\n     if check_win(board, player1):\n     display_board(board)\n     print('Player 1 wins!')\n     break\n     if ' ' not in board:\n     display_board(board)\n     print('Tie game!')\n     break\n     display_board(board)\n     position = int(input('Choose a position (1-9): ')) - 1\n     if board[position] == ' ':\n     board[position] = player2\n     if check_win(board, player2):\n     display_board(board)\n     print('Player 2 wins!')\n     break",
    "Code a bubble sort algorithm": "    def bubble_sort(arr):\n     n = len(arr)\n     for i in range(n):\n     for j in range(0, n-i-1):\n     if arr[j] > arr[j+1] :\n     arr[j], arr[j+1] = arr[j+1], arr[j]",
    "Build a weather app": "    import requests\n    \n    api_key = 'your_api_key'\n    url = f'http://api.openweathermap.org/data/2.5/weather?q={{city}}&appid={api_key}'\n    \n    def get_weather(city):\n     response = requests.get(url.format(city=city))\n     weather_data = response.json()\n     temperature = round(weather_data['main']['temp'] - 273.15, 2)\n     description = weather_data['weather'][0]['description']\n     return f'The temperature in {city} is {temperature} degrees Celsius with {description}'\n    \n    print(get_weather('San Francisco'))",
    "Code a simple puzzle game": "    import random\n    \n    grid = [['1', '2', '3'], ['4', '5', '6'], ['7', '8', ' ']]\n    \n    def print_grid():\n     for row in grid:\n     print(' '.join(row))\n    \n    def get_empty_space():\n     for i in range(len(grid)):\n     for j in range(len(grid[0])):\n     if grid[i][j] == ' ':\n     return i, j\n    \n    def move_tile():\n     i, j = get_empty_space()\n     possible_moves = []\n     if i > 0:\n     possible_moves.append((i-1, j))\n     if i < len(grid)-1:\n     possible_moves.append((i+1, j))\n     if j > 0:\n     possible_moves.append((i, j-1))\n     if j < len(grid[0])-1:\n     possible_moves.append((i, j+1))\n    \n     move = random.choice(possible_moves)\n     grid[i][j], grid[move[0]][move[1]] = grid[move[0]][move[1]], grid[i][j]\n    \n    print_grid()\n    while True:\n     move_tile()\n     print_grid()\n     if grid == [['1', '2', '3'], ['4', '5', '6'], ['7', '8', ' ']]:\n     print('You win!')\n     break",
    "Create a basic weather app": "    import requests\n    \n    def get_weather_data(city):\n     api_key = 'your_api_key'\n     url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}'\n     response = requests.get(url)\n     data = response.json()\n     temp = data['main']['temp']\n     feels_like = data['main']['feels_like']\n     description = data['weather'][0]['description']\n     print(f'The temperature in {city} is {temp}\u00c2\u00b0F, but it feels like {feels_like}\u00c2\u00b0F. The weather is {description}.')\n    \n    city = input('Enter a city: ')\n    get_weather_data(city)",
    "Build a basic website with Flask": "    from flask import Flask, render_template\n    \n    app = Flask(name)\n    \n    @app.route('/')\n    def home():\n     return render_template('home.html')\n    \n    if name == 'main':\n     app.run()",
    "Code a simple game of Hangman": "    import random\n    \n    words = ['apple', 'banana', 'cherry', 'dragonfruit', 'elderberry', 'fig', 'grapefruit', 'honeydew']\n    word = random.choice(words)\n    letters = set(word)\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    used_letters = set()\n    \n    while len(letters) > 0:\n     print(' '.join([letter if letter in used_letters else '_' for letter in word]))\n    \n     if len(letters) == 1:\n     print(f'You have one letter left. It is {letters.pop()}')\n     else:\n     print(f'You have {len(letters)} letters left.')\n    \n     user_letter = input('Guess a letter: ').lower()\n     if user_letter in alphabet - used_letters:\n     used_letters.add(user_letter)\n     if user_letter in letters:\n     letters.remove(user_letter)\n     else:\n     print('Letter not in word. Please try again.')\n     elif user_letter in used_letters:\n     print('You have already used that letter. Please try again.')\n     else:\n     print('Invalid character. Please try again.')\n    \n    print(f'Congratulations, the word was {word}!')",
    "Implement a basic machine learning model with scikit-learn": "    from sklearn import datasets\n    from sklearn.model_selection import train_test_split\n    from sklearn.neighbors import KNeighborsClassifier\n    from sklearn.metrics import accuracy_score\n    \n    # Load the iris dataset\n    iris = datasets.load_iris()\n    x = iris.data\n    y = iris.target\n    \n    # Split the data into training and test sets\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)\n    \n    # Fit the K-Nearest Neighbors classifier to the data\n    knn = KNeighborsClassifier(n_neighbors=3)\n    knn.fit(x_train, y_train)\n    \n    # Predict the class labels for the test set\n    y_pred = knn.predict(x_test)\n    \n    # Calculate the accuracy of the model\n    accuracy = accuracy_score(y_test, y_pred)\n    print(f'The accuracy of the KNN classifier on the Iris dataset is {accuracy:.2f}')",
    "Create a To-Do List app": "    tasks = []\n    while True:\n     task = input('Enter a task or type 'quit to exit: ')\n     if task.lower() == 'quit':\n     break\n     tasks.append(task)\n    print('To-Do List:')\n    for i, task in enumerate(tasks, 1):\n     print(f'{i}. {task}')",
    "Develop a calculator app with a GUI": "    import tkinter as tk\n    \n    root = tk.Tk()\n    root.title('Calculator')\n    entry = tk.Entry(root, width=40)\n    entry.grid(row=0, column=0, columnspan=4, padx=10, pady=10)\n    \n    # define button functions here\n    \n    root.mainloop()",
    "Create a budget tracking app": "    expenses = []\n    while True:\n     expense = input('Enter an expense or type 'done to finish: ')\n     if expense.lower() == 'done':\n     break\n     amount = float(input('Enter the amount: '))\n     expenses.append((expense, amount))\n    \n    total = sum(expense[1] for expense in expenses)\n    print('Expenses:')\n    for expense in expenses:\n     print(f'{expense[0]}: {expense[1]}')\n    print(f'Total: {total}')",
    "Build a currency converter app": "    import requests\n    \n    url = 'https://api.exchangerate-api.com/v4/latest/USD'\n    data = requests.get(url).json()\n    rates = data['rates']\n    \n    amount = float(input('Enter amount in USD: '))\n    convert_to = input('Enter currency code to convert to: ')\n    rate = rates[convert_to]\n    converted_amount = amount * rate\n    print(f'{amount} USD is {converted_amount} {convert_to}')",
    "Develop a music player app": "    import os\n    import pygame\n    \n    music_dir = 'path/to/music/folder'\n    pygame.init()\n    pygame.mixer.init()\n    \n    def play_music():\n     pygame.mixer.music.load(os.path.join(music_dir, 'song.mp3'))\n     pygame.mixer.music.play()\n    \n    play_music()",
    "Create a recipe app with search functionality": "    import json\n    \n    with open('recipes.json') as f:\n     recipes = json.load(f)\n    \n    query = input('Enter ingredient or recipe name: ')\n    results = []\n    for recipe in recipes:\n     if query in recipe['ingredients'] or query in recipe['name']:\n     results.append(recipe)\n    \n    print('Results:')\n    for recipe in results:\n     print(recipe['name'])",
    "Create a recipe app": "    import json\n    \n    with open('recipes.json') as f:\n     recipes = json.load(f)\n    \n    query = input('Enter ingredient or recipe name: ')\n    results = []\n    for recipe in recipes:\n     if query in recipe['ingredients'] or query in recipe['name']:\n     results.append(recipe)\n    \n    print('Results:')\n    for recipe in results:\n     print(recipe['name'])",
  "Create a social media app for sharing photos":
"import random\n\nclass User:\n def init(self, username):\n self.username = username\n self.photos = []\n\n def add_photo(self, photo):\n self.photos.append(photo)\n\n def get_random_photo(self):\n return random.choice(self.photos)\n\nusers = {}\n\nwhile True:\n command = input('Enter a command: ')\n\n if command.startswith('create user '):\n _, username = command.split()\n users[username] = User(username)\n\n elif command.startswith('add photo '):\n _, username, photo_url = command.split()\n users[username].add_photo(photo_url)\n\n elif command.startswith('get random photo '):\n _, username = command.split()\n print(users[username].get_random_photo())\n\n else:\n print('Invalid command. Please try again.')",
  "Build a social media app for sharing short messages":
"import random\n\nclass User:\n def init(self, username):\n self.username = username\n self.messages = []\n\n def add_message(self, message):\n self.messages.append(message)\n\n def get_random_message(self):\n return random.choice(self.messages)\n\nusers = {}\n\nwhile True:\n command = input('Enter a command: ')\n\n if command.startswith('create user '):\n _, username = command.split()\n users[username] = User(username)\n\n elif command.startswith('add message '):\n _, username, message = command.split()\n users[username].add_message(message)\n\n elif command.startswith('get random message '):\n _, username = command.split()\n print(users[username].get_random_message())\n\n else:\n print('Invalid command. Please try again.')",
  "Implement a deep learning model using TensorFlow": "import tensorflow as tf\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential\n\nmodel = Sequential()\nmodel.add(Dense(64, input_dim=100))\nmodel.add(Dense(10, activation='softmax'))\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Train the model\nx_train = tf.random.normal((1000, 100))\ny_train = tf.random.normal((1000, 10))\nmodel.fit(x_train, y_train, epochs=10, batch_size=32, validation_split=0.2)",
  "Create a RESTful API using Flask": "from flask import Flask, jsonify, request\n\napp = Flask(name)\n\n@app.route('/', methods=['GET'])\ndef index():\n return jsonify({'message': 'Welcome to the API'})\n\n@app.route('/hello', methods=['GET'])\ndef hello():\n name = request.args.get('name')\n return jsonify({'message': f'Hello, {name}!'})\n\nif name == 'main':\n app.run(debug=True)",
  "Build a sentiment analysis model using natural language processing": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nnltk.download('vader_lexicon')\n\n# Initialize the sentiment analyzer\nanalyzer = SentimentIntensityAnalyzer()\n\n# Analyze the sentiment of a sentence\nsentence = 'This movie was great!'\nsentiment = analyzer.polarity_scores(sentence)\nprint(sentiment)",
  "Create a web scraper using BeautifulSoup": "import requests\nfrom bs4 import BeautifulSoup\n\n# Send a request to the website\nresponse = requests.get('https://www.example.com')\n\n# Parse the HTML content using BeautifulSoup\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# Extract information from the page\ntitle = soup.title.text\nprint(title)",
  "Implement a decision tree using scikit-learn": "from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.datasets import load_iris\n\n# Load the iris dataset\niris = load_iris()\nX, y = iris.data, iris.target\n\n# Initialize the decision tree classifier\nclf = DecisionTreeClassifier()\n\n# Train the model\nclf.fit(X, y)\n\n# Predict the target values for new data\nnew_data = [[5.1, 3.5, 1.4, 0.2], [6.3, 3.3, 4.7, 1.6], [6.5, 3.0, 5.2, 2.0]]\npredictions = clf.predict(new_data)\nprint(predictions)",
  "Implement a k-means clustering algorithm using scikit-learn": "from sklearn.cluster import KMeans\nfrom sklearn.datasets import make_blobs\nimport matplotlib.pyplot as plt\n\n# Generate random data\nX, y = make_blobs(n_samples=1000, centers=3, random_state=42)\n\n# Initialize the k-means algorithm\nkmeans = KMeans(n_clusters=3)\n\n# Fit the model to the data\nkmeans.fit(X)\n\n# Visualize the clusters\nplt.scatter(X[:, 0], X[:, 1], c=kmeans.labels_)\nplt.show()",
  "Create a sentiment analysis model using Natural Language Processing (NLP) and NLTK": "import nltk\nfrom nltk.sentiment import SentimentIntensityAnalyzer\n\n# Initialize the sentiment analyzer\nsia = SentimentIntensityAnalyzer()\n\n# Analyze the sentiment of a text\ntext = 'This is a very good day.'\nsentiment_score = sia.polarity_scores(text)\nprint(sentiment_score)",
  "Implement a logistic regression model using scikit-learn": "from sklearn.linear_model import LogisticRegression\nfrom sklearn.datasets import load_breast_cancer\n\n# Load the breast cancer dataset\ndata = load_breast_cancer()\nX, y = data.data, data.target\n\n# Initialize the logistic regression model\nlr = LogisticRegression()\n\n# Train the model\nlr.fit(X, y)\n\n# Predict the target values for new data\nnew_data = [[1.2, 2.3, 3.4, 4.5], [2.3, 3.4, 4.5, 5.6], [3.4, 4.5, 5.6, 6.7]]\npredictions = lr.predict(new_data)\nprint(predictions)",
  "Create a recommendation system using collaborative filtering": "import pandas as pd\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# Load the movie ratings dataset\nratings_df = pd.read_csv('movie_ratings.csv')\n\n# Compute the pairwise cosine similarity between the movies\nmovie_similarity = cosine_similarity(ratings_df)\n\n# Get the top-k most similar movies for a given movie\nmovie_id = 42\nk = 5\nsimilar_movies = movie_similarity[movie_id].argsort()[::-1][:k]\nprint(similar_movies)",
  "Implement a random forest classifier using scikit-learn": "from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import load_iris\n\n# Load the iris dataset\niris = load_iris()\nX, y = iris.data, iris.target\n\n# Initialize the random forest classifier\nrf = RandomForestClassifier()\n\n# Train the model\nrf.fit(X, y)\n\n# Predict the target values for new data\nnew_data = [[5.1, 3.5, 1.4, 0.2], [6.3, 3.3, 4.7, 1.6], [6.5, 3.0, 5.2, 2.0]]\npredictions = rf.predict(new_data)\nprint(predictions)",
  "Create a chatbot using the RASA framework": "from rasa.core.agent import Agent\nfrom rasa.core.interpreter import RasaNLUInterpreter\n\n# Load the Rasa NLU interpreter\ninterpreter = RasaNLUInterpreter('path/to/nlu_model')\n\n# Initialize the Rasa agent\nagent = Agent.load('path/to/dialogue_model', interpreter=interpreter)\n\n# Start the conversation\nresponse = agent.handle_text('Hi, how are you?')\nprint(response[0]['text'])",
  "Implement a sentiment analysis model using Natural Language Processing (NLP) and NLTK": "import nltk; from nltk.sentiment import SentimentIntensityAnalyzer; sia = SentimentIntensityAnalyzer(); text = 'This is a very good day.'; sentiment_score = sia.polarity_scores(text); print(sentiment_score)",
  "Implement a logistic regression model using scikit-learn": "from sklearn.linear_model import LogisticRegression; from sklearn.datasets import load_breast_cancer; data = load_breast_cancer(); X, y = data.data, data.target; lr = LogisticRegression(); lr.fit(X, y); new_data = [[1.2, 2.3, 3.4, 4.5], [2.3, 3.4, 4.5, 5.6], [3.4, 4.5, 5.6, 6.7]]; predictions = lr.predict(new_data); print(predictions)",
  "Create a recommendation system using collaborative filtering": "import pandas as pd; from sklearn.metrics.pairwise import cosine_similarity; ratings_df = pd.read_csv('movie_ratings.csv'); movie_similarity = cosine_similarity(ratings_df); movie_id = 42; k = 5; similar_movies = movie_similarity[movie_id].argsort()[::-1][:k]; print(similar_movies)",
  "Create a chatbot using the RASA framework": "from rasa.core.agent import Agent; from rasa.core.interpreter import RasaNLUInterpreter; interpreter = RasaNLUInterpreter('path/to/nlu_model'); agent = Agent.load('path/to/dialogue_model', interpreter=interpreter); response = agent.handle_text('Hi, how are you?'); print(response[0]['text'])",
  "Implement k-means clustering using scikit-learn": "from sklearn.cluster import KMeans; from sklearn.datasets import make_blobs; X, y = make_blobs(n_samples=100, centers=3, random_state=42); kmeans = KMeans(n_clusters=3); kmeans.fit(X); cluster_centers = kmeans.cluster_centers_; print(cluster_centers)",
  "Create a neural network using TensorFlow": "import tensorflow as tf; model = tf.keras.Sequential([tf.keras.layers.Dense(64, activation='relu', input_shape=(10,)), tf.keras.layers.Dense(1, activation='sigmoid')]); model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']); X = tf.random.normal((1000, 10)); y = tf.random.normal((1000, 1)); model.fit(X, y, epochs=10);",
  "Create a simple 2D game using the Pygame library in Python": "import pygame; pygame.init(); screen = pygame.display.set_mode((800, 600)); while True: for event in pygame.event.get(): if event.type == pygame.QUIT: pygame.quit(); quit(); pygame.display.update()",
  "Generate a random maze using the recursive backtracker algorithm": "import random; WIDTH, HEIGHT = 10, 10; maze = [[0 for y in range(HEIGHT)] for x in range(WIDTH)]; stack = [(0, 0)]; while stack: x, y = stack.pop(); if not maze[x][y]: maze[x][y] = 1; neighbors = [(nx, ny) for nx, ny in [(x+1, y), (x-1, y), (x, y+1), (x, y-1)] if 0 <= nx < WIDTH and 0 <= ny < HEIGHT and not maze[nx][ny]]; if neighbors: stack.append((x, y)); stack.append(random.choice(neighbors)); print(maze)",
  "Create a simple platformer game using the Pygame library": "import pygame; pygame.init(); screen = pygame.display.set_mode((800, 600)); while True: for event in pygame.event.get(): if event.type == pygame.QUIT: pygame.quit(); quit(); pygame.display.update()",
  "Build a game of Tic-Tac-Toe using Python and the Pygame library": "import pygame; pygame.init(); screen = pygame.display.set_mode((800, 600)); while True: for event in pygame.event.get(): if event.type == pygame.QUIT: pygame.quit(); quit(); pygame.display.update()",
  "Create a game of Hangman using Python": "import random; wordlist = ['cat', 'dog', 'bird', 'fish']; word = random.choice(wordlist); letters = set(word); guess = set(); while letters != guess: print('Guess a letter:', end=' '); letter = input(); guess.add(letter); if letter not in letters: print('Wrong!'); print('You win! The word was:', word)",
  "Create a simple side-scrolling shooter game using Pygame": "import pygame; pygame.init(); screen = pygame.display.set_mode((800, 600)); while True: for event in pygame.event.get(): if event.type == pygame.QUIT: pygame.quit(); quit(); pygame.display.update()",
  "Implement a game of Blackjack using Python": "import random;deck=[2,3,4,5,6,7,8,9,10,10,10,10,11]*4;random.shuffle(deck);player_hand=[];dealer_hand=[];deal_card=lambda hand: hand.append(deck.pop());calculate_hand=lambda hand:sum(hand) if sum(hand) <= 21 else sum(hand) - 10 if 11 in hand else sum(hand);deal_card(player_hand);deal_card(dealer_hand);deal_card(player_hand);deal_card(dealer_hand);print_hands=lambda p,d:print(f'Your hand: {p} (Total: {calculate_hand(p)}), Dealer's hand: {d[0]} (Total: ?)');while True:print_hands(player_hand, dealer_hand);if calculate_hand(player_hand) > 21:print('Bust!');break;action=input('Do you want to Hit or Stand? ');deal_card(player_hand) if action.lower() == 'hit' else None if action.lower() == 'stand' else exit(1);while calculate_hand(dealer_hand) < 17:deal_card(dealer_hand);player_total=calculate_hand(player_hand);dealer_total=calculate_hand(dealer_hand);print_hands(player_hand, dealer_hand);print('You win!' if dealer_total > 21 or player_total > dealer_total else 'Dealer wins.' if player_total < dealer_total else 'It's a tie!' if player_total == dealer_total else 'You bust and lose.' if player_total > 21 else 'Dealer busts. You win!')"
}